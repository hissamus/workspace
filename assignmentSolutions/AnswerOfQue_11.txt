What would you use TreeSet or HashSet and in which scenes?

Ans- HashSet:-	HashSet is Implemented using a hash table. Elements are not ordered. The add, remove, and contains methods has constant time complexity O(1).
		This Class offers constant time performance for the basic operations (add, remove, contains and size).		
		HashSet does not guarantee that the order of elements will remain constant over time.
		Iteration performance depends on the initial capacity and the load factor of the HashSet. 
				
     TreeSet:- 	TreeSet is implemented using a tree structure(red-black tree in algorithm ). The elements in a set are sorted, but the add, remove, and contains methods has  
		time complexity of O(log (n)). It offers several methods to deal with the ordered set like first(), last(), headSet(), tailSet(), etc.  
		TreeSet guarantees that elements of set will be sorted (ascending, natural, or the one specified by you via it's constructor).
		It doesn't offer any tuning parameters for iteration performance.
				
	      * HashSet is much faster than TreeSet (constant-time versus log-time for most operations like add, remove and contains) but offers no ordering guarantees like TreeSet.
		So choice of usage depends entirely on your needs but if you need an ordered collection then you should still prefer HashSet to create the Set 
		and then convert it into TreeSet using following code statement
				
		Set<String> s = new TreeSet<String>(hashSet);
				
		For Multithreading environment both HashSet and TreeSet are Unsynchronised, so we will have to synchronize them explicitly.
				
Sample Code:
	
package com.sync;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;

public class SetComparison {
	 
    public static void main(String args[]){            
        HashSet<String> fruitsStore = new HashSet<String>();
        TreeSet<String> fruitBuzz = new TreeSet<String>();
     
        for(String fruit: Arrays.asList("mango", "apple", "banana")){
            fruitsStore.add(fruit);
            fruitBuzz.add(fruit);
        }
       
        //no ordering in HashSet – elements stored in random order
        System.out.println("Ordering in HashSet :" + fruitsStore);

        //should be sorted order – TreeSet stores element in sorted order
        System.out.println("Order of objects in TreeSet :" + fruitBuzz); 
     
        //Performance test to insert 10M elements in HashSet, LinkedHashSet and TreeSet
        Set<Integer> numbers = new HashSet<Integer>();
        long startTime = System.nanoTime();
        for(int i =0; i<100000; i++){
            numbers.add(i);
        }

        long endTime = System.nanoTime();
        System.out.println("Total time to insert 10M elements in HashSet in sec : "
                            + (endTime - startTime));
     
        // TreeSet performance Test – inserting 10M objects
        numbers = new TreeSet<Integer>();
        startTime = System.nanoTime();
        for(int i =0; i<100000; i++){
            numbers.add(i);
        }
        endTime = System.nanoTime();
        System.out.println("Total time to insert 10M elements in TreeSet in sec : "
                            + (endTime - startTime));
    }
}


Output:
Ordering in HashSet :[banana, apple, mango]
Order of objects in TreeSet :[apple, banana, mango]
Total time to insert 10M elements in HashSet in sec : 42635500
Total time to insert 10M elements in TreeSet in sec : 59589540

